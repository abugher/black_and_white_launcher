#!/bin/bash
#
# Requires:
#   * original game installer disc contents
#   * wine
#   * winetricks
#   * wget
#   * dos2unix


shopt -s nullglob

#install_dir="${HOME}/wineprefixes/black_and_white/drive_c/BlackAndWhite"
install_dir="${HOME}/wineprefixes/black_and_white/drive_c/Program Files/Lionhead Studios Ltd/Black & White"
image_dir="${HOME}/games/black_and_white/images/black_and_white/"
ci_image_dir="${HOME}/games/black_and_white/images/creature_isle/"
backup_dir="${HOME}/games/black_and_white/backups"
creature_dir="${HOME}/games/black_and_white/creatures"
patch_dir="${HOME}/games/black_and_white/patches"
latest_readme="${install_dir}/readme-patch-v142.txt"
latest_ci_readme="${install_dir}/CreatureIsle/readme-patch-v124.txt"
patches=(
  'Black_White_Patch_v1.100'
  'black_white_patch_v1_20'
  'BWFanPatchInstaller'
  'creaturecd_gorilla'
  'creaturecd_horse'
  'creaturecd_leopard'
  'creaturecd_mandrill'
  'BW_Football_Addon'
  'BW_Villager_Banter'
)
declare -A patch_urls
patch_urls=(
  ['Black_White_Patch_v1.100']='https://forum.bwgame.net/downloads/v1-1-patch.129/download'
  ['black_white_patch_v1_20']='https://forum.bwgame.net/downloads/v1-2-patch.130/download'
  ['BWFanPatchInstaller']='https://forum.bwgame.net/downloads/black-white-unofficial-patch-v1-42.1418/download'
  ['creaturecd_gorilla']='https://forum.bwgame.net/downloads/gorilla.133/download'
  ['creaturecd_horse']='https://forum.bwgame.net/downloads/horse.134/download'
  ['creaturecd_leopard']='https://forum.bwgame.net/downloads/leopard.135/download'
  ['creaturecd_mandrill']='https://forum.bwgame.net/downloads/mandrill.136/download'
  ['BW_Football_Addon']='https://forum.bwgame.net/downloads/football-addon.138/download'
  ['BW_Villager_Banter']='https://forum.bwgame.net/downloads/villager-banter.139/download'
)
ci_patches=(
  'BWCIFanPatchInstaller'
)
declare -A ci_patch_urls
ci_patch_urls=(
  ['BWCIFanPatchInstaller']='https://forum.bwgame.net/downloads/black-white-creature-isle-unofficial-patch-v1-24.1459/download'
)
export WINEPREFIX="${HOME}/wineprefixes/black_and_white"
export WINEARCH=win32


function main() {
  case "${1}" in
    install)
      install "${2}"
      ;;
    configure)
      install
      configure
      ;;
    backup)
      backup "${2}"
      ;;
    restore)
      install
      restore "${2}"
      ;;
    backup_creature)
      backup_creature "${2}" "${3}"
      ;;
    restore_creature)
      restore_creature "${2}" "${3}"
      ;;
    '')
      ;&
    play)
      install "${2}"
      play "${2}"
      ;;
    *)
      usage
      fail "Unrecognized action:  ${1}"
      ;;
  esac
}


function download_patches() {
  cd "${patch_dir}" || fail "Failed to enter patch directory:  '${patch_dir}'" "${?}"
  for patch in "${!patch_urls[@]}"; do
    url="${patch_urls[${patch}]}"
    if ! test -e "${patch}.exe"; then
      wget --content-disposition --trust-server-names "${url}" || fail "Failed to download patch:  '${patch}'" "${?}"
    fi
  done
  for zip in *.zip; do
    unzip "${zip}" || fail "Failed to unzip patch:  '${zip}'" "${?}"
    rm "${zip}" || fail "Failed to clean up zip file:  '${zip}'" "${?}"
  done
  for patch in "${!patch_urls[@]}"; do
    if ! test -e "${patch}.exe"; then
      fail "Patch missing after download:  '${patch}'"
    fi
  done
  cd "${OLDPWD}"
}


function download_ci_patches() {
  cd "${patch_dir}" || fail "Failed to enter patch directory:  '${patch_dir}'" "${?}"
  for patch in "${!ci_patch_urls[@]}"; do
    url="${ci_patch_urls[${patch}]}"
    if ! test -e "${patch}.exe"; then
      wget --content-disposition --trust-server-names "${url}" || fail "Failed to download patch:  '${patch}'" "${?}"
    fi
  done
  for zip in *.zip; do
    unzip "${zip}" || fail "Failed to unzip patch:  '${zip}'" "${?}"
    rm "${zip}" || fail "Failed to clean up zip file:  '${zip}'" "${?}"
  done
  for patch in "${!ci_patch_urls[@]}"; do
    if ! test -e "${patch}.exe"; then
      fail "Patch missing after download:  '${patch}'"
    fi
  done
  cd "${OLDPWD}"
}


function install() {
  if ! check_install; then
    #admonish
    download_patches
    configure_wine
    install_game
    fix_creature_cave
    install_patches
  fi
  if 
    test 'ci' = "${1}" \
    && ! check_ci_install
  then
    download_ci_patches
    install_ci
    install_ci_patches
  fi
}


function play() {
  output 'playing the game'
  if test 'ci' = "${1}"; then
    cd "${install_dir}/CreatureIsle" || fail "Failed to enter install path." "${?}"
    wine CreatureIsle.exe || fail "Failed to start Creature Isle." "${?}"
  else
    cd "${install_dir}" || fail "Failed to enter install path." "${?}"
    wine runblack.exe  || fail "Failed to start the game." "${?}"
  fi
}


function configure() {
  output 'configuring the game'
  cd "${install_dir}" || fail "Failed to enter install path." "${?}"
  wine Setup.exe  || fail "Failed to start the configuration program." "${?}"
}


function backup() {
  name="${1:-$(date --iso-8601=second)}"
  output 'backing up game state'
  cd "${backup_dir}" || fail "Failed to enter save directory."

  if test -d "${name}"; then
    fail "Backup already exists:  '${name}'"
  fi

  mkdir "${name}" || fail "Failed to create directory:  '${name}'" "${?}"
  wine regedit -E "${name}/LHMultiplayer.reg" 'HKEY_CURRENT_USER\Software\Lionhead Studios Ltd\Black & White\LHMultiplayer' || fail "Failed to back up registry key." "${?}"

  mkdir "${name}/CreatureMind" || fail "Failed to create directory:  '${name}/CreatureMind'" "${?}"
  rsync -a "${install_dir}/Scripts/CreatureMind/"*.erc ./"${name}/CreatureMind/" || fail "Failed to back up creature mind." "${?}"

  rsync -a --exclude=Backup "${install_dir}/Profiles/" ./"${name}/Profiles/" || fail "Failed to back up profiles."

  output "backup created:  '${name}'"

  cd "${OLDPWD}"
}


function restore() {
  output 'restoring game state'
  cd "${backup_dir}" || fail "Failed to enter save directory."
  name="${1:-$(ls -1tr | tail -n 1)}"

  if ! test -e "${name}"; then
    fail "No such save name:  '${name}'"
  fi

  wine regedit "${name}/LHMultiplayer.reg" || fail "Failed to restore registry key." "${?}"
  rsync -a ./"${name}/CreatureMind/"*.erc "${install_dir}/Scripts/CreatureMind/" || fail "Failed to restore creature minds." "${?}"

  cd "${OLDPWD}"
  cd "${backup_dir}/${name}/Profiles" || fail "Failed to enter profiles directory." "${?}"
  for profile in *; do
    rsync -a --delete "./${profile}/" "${install_dir}/Profiles/${profile}/" || fail "Failed to restore profile:  '${profile}'"
  done
  cd "${OLDPWD}"
 
  output "backup restored:  '${name}'"
}


function backup_creature() {
  output 'backing up creature'
  if test "${#}" -lt 1; then
    fail "Specify a profile name."
  fi
  profile="${1}"
  profile_underscored="$(sed -E 's/(.)/_\1/g' <<< "${profile}")"
  profile_key='HKEY_CURRENT_USER\Software\Lionhead Studios Ltd\Black & White\LHMultiplayer\Profiles\'"${profile_underscored}"
  creature_file="$(wine reg query "${profile_key}" /v file | dos2unix | awk '/^ *file/ {print $3}')" || fail "Failed to extract creature file name." "${?}"
  creature_name_hex="$(wine reg query "${profile_key}" /v 'creature name' | dos2unix | awk '/^ *creature name/ {print $4}')" || fail "Failed to extract creature name." "${?}"
  creature_name_format_string="$(sed -E 's/(..)/\\x\1/g' <<< "${creature_name_hex}")"
  creature_name="$(printf "${creature_name_format_string}\n" | tr -d '\0')" || fail "Failed to convert creature name."
  # Allow user to override creature name.
  creature_name="${2:-${creature_name}}"
  mkdir -p "${creature_dir}/${profile}/${creature_name}"
  cp "${install_dir}/Scripts/CreatureMind/${creature_file}" "${creature_dir}/${profile}/${creature_name}/${creature_file}" || fail "Failed to back up creature mind file." "${?}"
  cp "${install_dir}/Scripts/CreatureMind/Physique${creature_file}" "${creature_dir}/${profile}/${creature_name}/Physique${creature_file}" || fail "Failed to back up creature body file." "${?}"
  output "creature backed up:  ${creature_name}"
}


function restore_creature() {
  output 'restoring creature'
  if test "${#}" -lt 1; then
    fail "Specify a profile name."
  fi
  profile="${1}"
  creature_name="${2}"
  profile_underscored="$(sed -E 's/(.)/_\1/g' <<< "${profile}")"
  profile_key='HKEY_CURRENT_USER\Software\Lionhead Studios Ltd\Black & White\LHMultiplayer\Profiles\'"${profile_underscored}"
  if ! test -d "${creature_dir}/${profile}"; then
    fail "No creatures are backed up for this profile:  '${profile}'"
  fi
  if ! test -d "${install_dir}/Profiles/${profile_underscored}"; then
    debug "${install_dir}/Profiles/${profile_underscored}"
    fail "Profile not present:  '${profile}'"
  fi
  cd "${creature_dir}/${profile}" || fail "Failed to enter profile subdirectory." "${?}"
  creatures=( * )
  case "${#creatures[@]}" in
    0)
      fail "No creatures backed up in existing directory for profile:  '${profile}'" "${?}"
      ;;
    1)
      creature_name="${creature_name:-${creatures[0]}}"
      ;;
    *)
      if test '' = "${creature_name}"; then
        warn "Multiple creatures present for profile '${profile}'.  You must specify one of:"
        for creature in "${creatures[@]}"; do
          warn "  ${creature}"
        done
        fail "Failed to determine creature name."
      fi
      backup_present='no'
      for creature in "${creatures[@]}"; do
        if test "${creature}" = "${creature_name}"; then
          backup_present='yes'
        fi
      done
      if test 'no' = "${backup_present}"; then
        fail "No backup is present for creature:  '${creature_name}'"
      fi
      ;;
  esac

  cd "${OLDPWD}"
  cd "${creature_dir}/${profile}/${creature_name}"

  files=( * )
  if ! test 2 = "${#files[@]}"; then
    fail "Wrong number of files in save directory for creature:  '${creature_name}'"
  fi
  creature_file="$(ls | grep -v Physique)"
  if ! grep -q . <<< "${creature_file}"; then
    fail "Failed to read creature mind file name."
  fi
  creature_body_file="$(ls | grep Physique)"
  if ! grep -q . <<< "${creature_body_file}"; then
    fail "Failed to read creature body file name."
  fi
  cp "${creature_file}" "${install_dir}/Scripts/CreatureMind/" || fail "Failed to restore creature mind file." "${?}"
  cp "${creature_body_file}" "${install_dir}/Scripts/CreatureMind/" || fail "Failed to restore creature body file." "${?}"
  wine reg add "${profile_key}" /v file /d "${creature_file}" /f || fail "Failed to associate profile '${profile}' with creature:  '${creature}'" "${?}"
  output "creature restored:  ${creature_name}"
}


function check_install() {
  if test -e "${latest_readme}"; then
    return 0
  fi

  if test -e "${WINEPREFIX}"; then
    warn "Back up Profiles, then remove:  '${WINEPREFIX}'"
    fail "Incomplete installation already present."
  fi

  return 1
}


function check_ci_install() {
  if test -e "${latest_ci_readme}"; then
    return 0
  fi

  return 1
}


function admonish() {
  warn 'Your active role in the following installation:'
  warn '  * rescue dialog box(es) from behind the backdrop image'
  warn '  * decline to start the game after initial install'
  warn '  * configure the game and adjust resolution when prompted after patch 1.42'
  warn '  * click "accept", "next", "yes", etc, ad nauseum' 
  warn 'Press enter after reading.'
  read
}


function configure_wine() {
  output 'creating wineprefix'
  wineboot -i || fail "Failed to create wineprefix." "${?}"

  cd "${WINEPREFIX}/dosdevices/" || fail "Failed to enter dosdevices directory." "${?}"
  output 'mapping "optical" drives'
  ln -s "${image_dir}" d: || fail "Failed to map drive D: to image directory." "${?}"
  ln -s "${ci_image_dir}" e: || fail "Failed to map drive E: to image directory." "${?}"
  cd "${OLDPWD}"

  output 'replacing mono with .NET'
  winetricks remove_mono >/dev/null 2>&1 || fail "Failed to remove mono." "${?}"
  winetricks dotnet45 >/dev/null 2>&1 || fail "Failed to install dotnet." "${?}"
}


function install_game() {
  output 'installing from disc image'
  wine 'D:\Setup.exe' >/dev/null 2>&1 || fail "Installer failed." "${?}"
}


function install_ci() {
  output 'installing CI from disc image'
  wine 'E:\Setup.exe' >/dev/null 2>&1 || fail "Installer failed." "${?}"
}


function fix_creature_cave() {
  if test -e "${install_dir}/scripts"; then
    return 0
  fi
  cd "${install_dir}" || fail "Failed to enter install path." "${?}"
  ln -s Scripts scripts || fail "Failed to fix creature cave." "${?}"
  cd "${OLDPWD}"
}


function install_patches() {
  for patch in "${patches[@]}"; do
    output "installing patch:  '${patch}.exe'"
    wine "${patch_dir}/${patch}.exe" >/dev/null 2>&1 || fail "Patch installer failed:  '${patch}.exe'" "${?}"
  done
}


function install_ci_patches() {
  for patch in "${ci_patches[@]}"; do
    output "installing patch:  '${patch}.exe'"
    wine "${patch_dir}/${patch}.exe" >/dev/null 2>&1 || fail "Patch installer failed:  '${patch}.exe'" "${?}"
  done
}


function usage() {
# The name under which the creature was backed up should become the in-game
# name of the creature when restored.  It doesn't, though.
  output 'Usage:'
  output ''
  output '  black_and_white [action] [...]'
  output ''
  output '  black_and_white'
  output '  black_and_white play'
  output '  black_and_white install'
  output '  black_and_white install ci'
  output '  black_and_white configure'
  output '  black_and_white backup'
  output '  black_and_white restore'
  output '  black_and_white backup [backup name]'
  output '  black_and_white restore [backup name]'
  output '  black_and_white backup_creature <profile name> [creature name]'
  output '  black_and_white restore_creature <profile name> [creature name]'
  output ''
  output 'Without arguments, "play" is the implied action.  "play" implies "install" as a'
  output 'prior action.  "install" acts only if the game is not yet installed.'
  output '"configure" provides controls for screen resolution.  "backup" backs up'
  output 'profiles and creatures.  A name for the backup may be specified.  "restore"'
  output 'restores a backup (destructively).  A backup may be specified by name.  If no'
  output 'name is specified, the most recent backup file is restored.  "backup_creature"'
  output 'backs up the creature from the specified profile.  The creature will be saved'
  output 'with the specified creature name, if any, or else the in-game name of the'
  output 'creature.  "restore_creature" restores a creature to the specified profile.  If'
  output 'no creature name is specified, and only one creature is backed up for this'
  output 'profile, that creature will be restored.  If multiple creatures are backed up,'
  output 'a creature name must be specified, and the named creature will be restored.  It'
  output 'will become the active creature associated with the named profile.'
}


function fail() {
  printf 'ERROR:  %s\n' "${1}" >&2
  exit "${2:-1}"
}


function warn() {
  printf 'WARNING:  %s\n' "${1}" >&2
}


function output() {
  printf '%s\n' "${1}"
}


function debug() {
  if ! test '' = "${DEBUG}"; then
    printf 'DEBUG:  %s\n' "${1}" >&2
  fi
}


main "${@}"
